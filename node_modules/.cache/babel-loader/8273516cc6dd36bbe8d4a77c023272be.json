{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jony8\\\\OneDrive\\\\Escritorio\\\\react-peliculas\\\\src\\\\peliculas\\\\EditarPeliculas.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport Cargando from \"utils/Cargando\";\nimport { urlPeliculas } from \"utils/endpoints\";\nimport { convertirPeliculaAFormData } from \"utils/FormDataUtils\";\nimport MostrarErrores from \"utils/MostarErrores\";\nimport FormularioPeliculas from \"./FormularioPeliculas\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function EditarPeliculas() {\n  _s();\n\n  const [peliculas, setPeliculas] = useState();\n  const [peliculaPutGet, setPeliculaPutGet] = useState();\n  const {\n    id\n  } = useParams();\n  const history = useHistory();\n  const [errores, setErrores] = useState([]);\n  useEffect(() => {\n    axios.get(`${urlPeliculas}/PutGet/${id}`).then(respuesta => {\n      const modelo = {\n        titulo: respuesta.data.pelicula.titulo,\n        enCines: respuesta.data.pelicula.enCines,\n        trailer: respuesta.data.pelicula.trailer,\n        posterURL: respuesta.data.pelicula.poster,\n        resumen: respuesta.data.pelicula.resumen,\n        fechaLanzamiento: new Date(respuesta.data.pelicula.fechaLanzamiento)\n      };\n      setPeliculas(modelo);\n      setPeliculaPutGet(respuesta.data);\n    });\n  }, [id]);\n\n  async function editarPelicula(peliculaEditar) {\n    try {\n      const formData = convertirPeliculaAFormData(peliculaEditar);\n      await axios({\n        method: 'put',\n        url: `${urlPeliculas}/${id}`,\n        data: formData,\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }).then(respuesta => {\n        history.push(`/pelicula/${id}`);\n      });\n    } catch (error) {}\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Editar Pel\\xEDcula\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MostrarErrores, {\n      errores: errores\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), peliculas && peliculaPutGet ? /*#__PURE__*/_jsxDEV(FormularioPeliculas, {\n      actoresSeleccionados: peliculaPutGet.actores,\n      cinesSeleccionados: peliculaPutGet.cinesSeleccionados,\n      cinesNoSeleccionados: peliculaPutGet.cinesNoSeleccionados,\n      generosNoSeleccionados: peliculaPutGet.generosNoSeleccionados,\n      generosSeleccionados: peliculaPutGet.generosSeleccionados,\n      modelo: peliculas,\n      onSubmit: valores => console.log(valores)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 44\n    }, this) : /*#__PURE__*/_jsxDEV(Cargando, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true);\n}\n\n_s(EditarPeliculas, \"XVDKc/9wWHqFudq5VMttNl9IiBs=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = EditarPeliculas;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditarPeliculas\");","map":{"version":3,"sources":["C:/Users/jony8/OneDrive/Escritorio/react-peliculas/src/peliculas/EditarPeliculas.tsx"],"names":["axios","useEffect","useState","useHistory","useParams","Cargando","urlPeliculas","convertirPeliculaAFormData","MostrarErrores","FormularioPeliculas","EditarPeliculas","peliculas","setPeliculas","peliculaPutGet","setPeliculaPutGet","id","history","errores","setErrores","get","then","respuesta","modelo","titulo","data","pelicula","enCines","trailer","posterURL","poster","resumen","fechaLanzamiento","Date","editarPelicula","peliculaEditar","formData","method","url","headers","push","error","actores","cinesSeleccionados","cinesNoSeleccionados","generosNoSeleccionados","generosSeleccionados","valores","console","log"],"mappings":"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","sourcesContent":["import { actorPeliculaDTO } from \"actores/actores.model\";\nimport axios, { AxiosResponse } from \"axios\";\nimport { cineDTO } from \"cines/cines.model\";\nimport { generoDTO } from \"generos/generos.model\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport Cargando from \"utils/Cargando\";\nimport { urlPeliculas } from \"utils/endpoints\";\nimport { convertirPeliculaAFormData } from \"utils/FormDataUtils\";\nimport MostrarErrores from \"utils/MostarErrores\";\nimport FormularioPeliculas from \"./FormularioPeliculas\";\nimport { peliculaCreacionDTO, peliculasPutGetDTO } from \"./peliculas.model\";\n\nexport default function EditarPeliculas() {\n\n\n    const [peliculas, setPeliculas] = useState<peliculaCreacionDTO>();\n    const [peliculaPutGet, setPeliculaPutGet] = useState<peliculasPutGetDTO>();\n    const {id}: any = useParams();\n\n    const history = useHistory();\n    const [errores, setErrores] = useState<string[]>([]);\n\n    useEffect(() => {\n        axios.get(`${urlPeliculas}/PutGet/${id}`)\n        .then((respuesta: AxiosResponse<peliculasPutGetDTO>) => {\n            const modelo: peliculaCreacionDTO = {\n                titulo: respuesta.data.pelicula.titulo,\n                enCines: respuesta.data.pelicula.enCines,\n                trailer: respuesta.data.pelicula.trailer,\n                posterURL: respuesta.data.pelicula.poster,\n                resumen: respuesta.data.pelicula.resumen,\n                fechaLanzamiento: new Date(respuesta.data.pelicula.fechaLanzamiento)\n            };\n            setPeliculas(modelo);\n            setPeliculaPutGet(respuesta.data);\n        })\n    }, [id])\n\n    async function editarPelicula(peliculaEditar:peliculaCreacionDTO) {\n        try{\n            const formData = convertirPeliculaAFormData(peliculaEditar);\n            await axios({\n                method: 'put',\n                url: `${urlPeliculas}/${id}`,\n                data: formData,\n                headers: {'Content-Type': 'multipart/form-data'}\n            }).then((respuesta: AxiosResponse<number>) => {\n                history.push(`/pelicula/${id}`);\n            });\n        }catch(error){\n\n        }\n    }\n\n    return (\n\n        <>\n            <h3>Editar Pel√≠cula</h3>\n            <MostrarErrores errores={errores} />\n            {peliculas && peliculaPutGet ? <FormularioPeliculas\n            actoresSeleccionados={peliculaPutGet!.actores}\n            cinesSeleccionados={peliculaPutGet!.cinesSeleccionados}\n            cinesNoSeleccionados={peliculaPutGet!.cinesNoSeleccionados}\n            generosNoSeleccionados={peliculaPutGet!.generosNoSeleccionados}\n            generosSeleccionados={peliculaPutGet!.generosSeleccionados}\n                modelo={peliculas}\n                onSubmit={valores => console.log(valores)}\n            /> : <Cargando />}\n        </>\n\n    )\n}"]},"metadata":{},"sourceType":"module"}