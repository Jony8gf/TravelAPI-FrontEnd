{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jony8\\\\OneDrive\\\\Escritorio\\\\react-peliculas\\\\src\\\\peliculas\\\\FormularioPeliculas.tsx\",\n    _s = $RefreshSig$();\n\nimport { Form, Formik } from \"formik\";\nimport * as Yup from 'yup';\nimport FormGroupText from \"utils/FormGroupText\";\nimport FormGroupCheckbox from \"utils/FormGroupCheckbox\";\nimport FormGroupFecha from \"utils/FormGroupFecha\";\nimport FormGroupImagen from \"utils/FormGroupImagen\";\nimport Button from \"utils/Button\";\nimport { Link } from \"react-router-dom\";\nimport SelectorMultiple from \"utils/SelectorMultiple\";\nimport { useState } from \"react\";\nimport TypeAheadActores from \"actores/TypeAheadActores\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function FormularioPeliculas(props) {\n  _s();\n\n  const [generosSeleccionados, setGenerosSeleccionados] = useState(mapear(props.generosSeleccionados));\n  const [generosNoSeleccionados, setGenerosNoSeleccionados] = useState(mapear(props.generosNoSeleccionados));\n  const [cinesSeleccionados, setCinesSeleccionados] = useState(mapear(props.cinesSeleccionados));\n  const [cinesNoSeleccionados, setCinesNoSeleccionados] = useState(mapear(props.cinesNoSeleccionados));\n  const [actoresSeleccionados, setActoresSeleccionados] = useState(props.actoresSeleccionados);\n\n  function mapear(arreglo) {\n    return arreglo.map(valor => {\n      return {\n        llave: valor.id,\n        valor: valor.nombre\n      };\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: props.modelo,\n    onSubmit: (valores, acciones) => {\n      valores.generosIds = generosSeleccionados.map(valor => valor.llave);\n      valores.cinesIds = cinesSeleccionados.map(valor => valor.llave);\n      valores.actores = actoresSeleccionados;\n      props.onSubmit(valores, acciones);\n    },\n    validationSchema: Yup.object({\n      titulo: Yup.string().required('Este campo es requerido').primeraLetraMayuscula()\n    }),\n    children: formikProps => /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(FormGroupText, {\n        label: \"T\\xEDtulo\",\n        campo: \"titulo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(FormGroupCheckbox, {\n        label: \"En cines\",\n        campo: \"enCines\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(FormGroupText, {\n        label: \"Trailer\",\n        campo: \"trailer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(FormGroupFecha, {\n        campo: \"fechaLanzamiento\",\n        label: \"Fecha Lanzamiento\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(FormGroupImagen, {\n        campo: \"poster\",\n        label: \"Poster\",\n        imagenURL: props.modelo.posterURL\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"G\\xE9neros:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(SelectorMultiple, {\n          seleccionados: generosSeleccionados,\n          noSeleccionados: generosNoSeleccionados,\n          onChange: (seleccionados, noSeleccionados) => {\n            setGenerosSeleccionados(seleccionados);\n            setGenerosNoSeleccionados(noSeleccionados);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Cines:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(SelectorMultiple, {\n          seleccionados: cinesSeleccionados,\n          noSeleccionados: cinesNoSeleccionados,\n          onChange: (seleccionados, noSeleccionados) => {\n            setCinesSeleccionados(seleccionados);\n            setCinesNoSeleccionados(noSeleccionados);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(TypeAheadActores, {\n          onAdd: actores => {\n            setActoresSeleccionados(actores);\n          },\n          onRemove: actor => {\n            const actores = actoresSeleccionados.filter(x => x !== actor);\n            setActoresSeleccionados(actores);\n          },\n          actores: actoresSeleccionados,\n          listadoUI: actor => /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [actor.nombre, \" / \", /*#__PURE__*/_jsxDEV(\"input\", {\n              placeholder: \"Personaje\",\n              type: \"text\",\n              value: actor.personaje,\n              onChange: e => {\n                const indice = actoresSeleccionados.findIndex(x => x.id === actor.id);\n                const actores = [...actoresSeleccionados];\n                actores[indice].personaje = e.currentTarget.value;\n                setActoresSeleccionados(actores);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 54\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        disabled: formikProps.isSubmitting,\n        type: \"submit\",\n        children: \"Enviar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        className: \"btn btn-secondary\",\n        to: \"/\",\n        children: \"Cancelar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FormularioPeliculas, \"3WTwqunC8f8/AcLsfyTR8eZ8HGs=\");\n\n_c = FormularioPeliculas;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormularioPeliculas\");","map":{"version":3,"sources":["C:/Users/jony8/OneDrive/Escritorio/react-peliculas/src/peliculas/FormularioPeliculas.tsx"],"names":["Form","Formik","Yup","FormGroupText","FormGroupCheckbox","FormGroupFecha","FormGroupImagen","Button","Link","SelectorMultiple","useState","TypeAheadActores","FormularioPeliculas","props","generosSeleccionados","setGenerosSeleccionados","mapear","generosNoSeleccionados","setGenerosNoSeleccionados","cinesSeleccionados","setCinesSeleccionados","cinesNoSeleccionados","setCinesNoSeleccionados","actoresSeleccionados","setActoresSeleccionados","arreglo","map","valor","llave","id","nombre","modelo","valores","acciones","generosIds","cinesIds","actores","onSubmit","object","titulo","string","required","primeraLetraMayuscula","formikProps","posterURL","seleccionados","noSeleccionados","actor","filter","x","personaje","e","indice","findIndex","currentTarget","value","isSubmitting"],"mappings":"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","sourcesContent":["import { Form, Formik, FormikHelpers } from \"formik\";\nimport { peliculaCreacionDTO } from \"./peliculas.model\";\nimport * as Yup from 'yup'\nimport FormGroupText from \"utils/FormGroupText\";\nimport FormGroupCheckbox from \"utils/FormGroupCheckbox\";\nimport FormGroupFecha from \"utils/FormGroupFecha\";\nimport FormGroupImagen from \"utils/FormGroupImagen\";\nimport Button from \"utils/Button\";\nimport { Link } from \"react-router-dom\";\nimport SelectorMultiple, { selectorMultipleModel } from \"utils/SelectorMultiple\";\nimport { generoDTO } from \"generos/generos.model\";\nimport { useState } from \"react\";\nimport { cineDTO } from \"cines/cines.model\";\nimport TypeAheadActores from \"actores/TypeAheadActores\";\nimport { actorPeliculaDTO } from \"actores/actores.model\";\n\nexport default function FormularioPeliculas(props: formularioPeliculasProps) {\n    const [generosSeleccionados, setGenerosSeleccionados] = \n    useState(mapear(props.generosSeleccionados));\n    const [generosNoSeleccionados, setGenerosNoSeleccionados] = \n    useState(mapear(props.generosNoSeleccionados));\n\n    const [cinesSeleccionados, setCinesSeleccionados] =\n    useState(mapear(props.cinesSeleccionados));\n    const [cinesNoSeleccionados, setCinesNoSeleccionados] =\n    useState(mapear(props.cinesNoSeleccionados));\n\n    const [actoresSeleccionados, setActoresSeleccionados] = \n    useState<actorPeliculaDTO[]>(props.actoresSeleccionados)\n    \n    function mapear(arreglo: {id: number, nombre: string}[]): selectorMultipleModel[]{\n        return arreglo.map(valor => {\n            return {llave: valor.id, valor: valor.nombre}\n        })\n    }\n\n    return (\n        <Formik\n            initialValues={props.modelo}\n            onSubmit={(valores, acciones) => {\n                valores.generosIds = generosSeleccionados.map(valor => valor.llave);\n                valores.cinesIds = cinesSeleccionados.map(valor => valor.llave);\n                valores.actores = actoresSeleccionados;\n                props.onSubmit(valores, acciones);\n            }}\n            validationSchema={Yup.object({\n                titulo: Yup.string().required('Este campo es requerido').primeraLetraMayuscula()\n            })}\n        >\n            {formikProps => (\n                <Form>\n                    <FormGroupText label=\"Título\" campo=\"titulo\" />\n                    <FormGroupCheckbox label=\"En cines\" campo=\"enCines\" />\n                    <FormGroupText label=\"Trailer\" campo=\"trailer\" />\n                    <FormGroupFecha campo=\"fechaLanzamiento\" label=\"Fecha Lanzamiento\" />\n                    <FormGroupImagen campo=\"poster\" label=\"Poster\"\n                        imagenURL={props.modelo.posterURL} />\n\n                    <div className=\"form-group\">\n                        <label>Géneros:</label>\n                        <SelectorMultiple seleccionados={generosSeleccionados}\n                            noSeleccionados={generosNoSeleccionados}\n                            onChange={(seleccionados, noSeleccionados) => {\n                                setGenerosSeleccionados(seleccionados)\n                                setGenerosNoSeleccionados(noSeleccionados);\n                            }}\n                        />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>Cines:</label>\n                        <SelectorMultiple seleccionados={cinesSeleccionados}\n                            noSeleccionados={cinesNoSeleccionados}\n                            onChange={(seleccionados, noSeleccionados) => {\n                                setCinesSeleccionados(seleccionados)\n                                setCinesNoSeleccionados(noSeleccionados);\n                            }}\n                        />\n                    </div>\n\n                    <div className=\"form-group\">\n                            <TypeAheadActores \n                                onAdd={actores => {\n                                    setActoresSeleccionados(actores);\n                                }}\n                                onRemove={actor => {\n                                    const actores = actoresSeleccionados.filter(x => x !== actor);\n                                    setActoresSeleccionados(actores);\n                                }}\n                                actores={actoresSeleccionados}\n                                listadoUI={(actor: actorPeliculaDTO) => \n                                <>\n                                    {actor.nombre} / <input placeholder=\"Personaje\" \n                                    type=\"text\" value={actor.personaje} \n                                    onChange={e => {\n                                        const indice = actoresSeleccionados\n                                        .findIndex(x => x.id === actor.id);\n\n                                        const actores = [...actoresSeleccionados];\n                                        actores[indice].personaje = e.currentTarget.value;\n                                        setActoresSeleccionados(actores);\n                                    }}\n                                    />\n                                </>}\n                            />\n                    </div>\n\n                    <Button disabled={formikProps.isSubmitting} type=\"submit\">Enviar</Button>\n                    <Link className=\"btn btn-secondary\" to=\"/\">Cancelar</Link>\n                </Form>\n            )}\n        </Formik>\n    )\n}\n\ninterface formularioPeliculasProps {\n    modelo: peliculaCreacionDTO;\n    onSubmit(valores: peliculaCreacionDTO, acciones: FormikHelpers<peliculaCreacionDTO>): void;\n    generosSeleccionados: generoDTO[];\n    generosNoSeleccionados: generoDTO[];\n    cinesSeleccionados: cineDTO[];\n    cinesNoSeleccionados: cineDTO[];\n    actoresSeleccionados: actorPeliculaDTO[];\n}"]},"metadata":{},"sourceType":"module"}