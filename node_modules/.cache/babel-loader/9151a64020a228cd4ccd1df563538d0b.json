{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jony8\\\\OneDrive\\\\Documentos\\\\AP.NET-CORE\\\\react-travel\\\\src\\\\utils\\\\Mapa.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { MapContainer, Marker, Popup, TileLayer, useMapEvent } from \"react-leaflet\";\nimport L from 'leaflet';\nimport icon from 'leaflet/dist/images/marker-icon.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\nimport 'leaflet/dist/leaflet.css';\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet DefaultIcon = L.icon({\n  iconUrl: icon,\n  shadowUrl: iconShadow,\n  iconAnchor: [16, 37]\n});\nlet lat;\nlet long;\nL.Marker.prototype.options.icon = DefaultIcon;\nexport default function Mapa(props) {\n  _s();\n\n  const [coordenadas, setCoordenadas] = useState(props.coordenadas);\n  const [lat, setLat] = useState();\n  const [long, setLong] = useState();\n  navigator.geolocation.getCurrentPosition(function (position) {\n    setLat(position.coords.latitude);\n    setLong(position.coords.longitude);\n  });\n  return (\n    /*#__PURE__*/\n    // center={[18.467455, -69.931242]} zoom={14}\n    _jsxDEV(MapContainer, {\n      center: [lat, long],\n      zoom: 14,\n      style: {\n        height: props.height\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"React Travel\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), props.soloLectura ? /*#__PURE__*/_jsxDEV(ClickMapa, {\n        setPunto: coordenadas => {\n          setCoordenadas([coordenadas]);\n          props.manejarClickMapa(coordenadas);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this) : null, coordenadas.map(coordenada => /*#__PURE__*/_jsxDEV(Marcador, { ...coordenada\n      }, coordenada.lat + coordenada.lng, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 44\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_s(Mapa, \"bKeV0N2OswxYjjlawQuHvXha/Ps=\");\n\n_c = Mapa;\nMapa.defaultProps = {\n  height: '500px',\n  soloLectura: false,\n  manejarClickMapa: () => {}\n};\n\nfunction ClickMapa(props) {\n  _s2();\n\n  useMapEvent('click', e => {\n    props.setPunto({\n      lat: e.latlng.lat,\n      lng: e.latlng.lng\n    });\n  });\n  return null;\n}\n\n_s2(ClickMapa, \"UJFMGIyDtKpxgOUCFJT9iLs+CFY=\", false, function () {\n  return [useMapEvent];\n});\n\n_c2 = ClickMapa;\n\nfunction Marcador(props) {\n  return /*#__PURE__*/_jsxDEV(Marker, {\n    position: [props.lat, props.lng],\n    children: props.nombre ? /*#__PURE__*/_jsxDEV(Popup, {\n      children: props.nombre\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 29\n    }, this) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n}\n\n_c3 = Marcador;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Mapa\");\n$RefreshReg$(_c2, \"ClickMapa\");\n$RefreshReg$(_c3, \"Marcador\");","map":{"version":3,"sources":["C:/Users/jony8/OneDrive/Documentos/AP.NET-CORE/react-travel/src/utils/Mapa.tsx"],"names":["MapContainer","Marker","Popup","TileLayer","useMapEvent","L","icon","iconShadow","useState","DefaultIcon","iconUrl","shadowUrl","iconAnchor","lat","long","prototype","options","Mapa","props","coordenadas","setCoordenadas","setLat","setLong","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","height","soloLectura","manejarClickMapa","map","coordenada","lng","defaultProps","ClickMapa","e","setPunto","latlng","Marcador","nombre"],"mappings":"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","sourcesContent":["import { MapContainer, Marker, Popup, TileLayer, useMapEvent } from \"react-leaflet\"\nimport L from 'leaflet'\nimport icon from 'leaflet/dist/images/marker-icon.png'\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png'\nimport 'leaflet/dist/leaflet.css';\nimport {coordenadaDTO} from './coordenadas.model'\nimport { useState } from \"react\";\n\nlet DefaultIcon = L.icon({\n    iconUrl: icon,\n    shadowUrl: iconShadow,\n    iconAnchor: [16, 37]\n});\n\nlet lat;\nlet long;\n\n\n\nL.Marker.prototype.options.icon = DefaultIcon;\n\nexport default function Mapa(props: mapaProps){\n    const [coordenadas, setCoordenadas] = useState<coordenadaDTO[]>(props.coordenadas)\n    const [lat, setLat] = useState<number>();\n    const [long, setLong] = useState<number>();\n\n    navigator.geolocation.getCurrentPosition(function(position) {\n        setLat(position.coords.latitude);\n        setLong(position.coords.longitude);\n      });\n\n    return (\n\n        // center={[18.467455, -69.931242]} zoom={14}\n        <MapContainer\n            center={[lat, long]} zoom={14}\n            style={{height: props.height}}\n        >\n            <TileLayer attribution=\"React Travel\"\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            {props.soloLectura ? \n                <ClickMapa setPunto={coordenadas => {\n                    setCoordenadas([coordenadas]);\n                    props.manejarClickMapa(coordenadas);\n                }} /> : null}\n            \n            {coordenadas.map(coordenada => <Marcador key={coordenada.lat + coordenada.lng} \n              {...coordenada}\n            />)}\n        </MapContainer>\n    )\n}\n\ninterface mapaProps {\n    height: string;\n    coordenadas: coordenadaDTO[];\n    manejarClickMapa(coordenadas: coordenadaDTO): void;\n    soloLectura: boolean;\n}\n\nMapa.defaultProps = {\n    height: '500px',\n    soloLectura: false,\n    manejarClickMapa: () => {}\n}\n\nfunction ClickMapa(props: clickMapaProps){\n    useMapEvent('click', e => {\n        props.setPunto({lat: e.latlng.lat, lng: e.latlng.lng})\n    })\n    return null;\n}\n\ninterface clickMapaProps {\n    setPunto(coordenadas: coordenadaDTO): void;\n}\n\nfunction Marcador(props: coordenadaDTO){\n    return (\n        <Marker position={[props.lat, props.lng]}> \n            {props.nombre ? <Popup>{props.nombre}</Popup> : null}\n        </Marker>\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}